!SRCCOPY	=$00CC0020

●GraphLib_Init(W,H)
	BG_IMAGE_BASEをパネルとして作成
		BG_IMAGE_BASE→X=0
		BG_IMAGE_BASE→Y=0
		BG_IMAGE_BASE→W=W
		BG_IMAGE_BASE→H=H
		BG_IMAGE_BASE→可視=1

●DCコピー(hdcDest,nXDest,nYDest,nWidth,nHeight,hdcSrc,nXSrc,nYSrc,dwRop)=DLL("Gdi32.dll",
"BOOL BitBlt(
HDC hdcDest,//コピー先デバイスコンテキストのハンドル
int nXDest,//コピー先長方形の左上隅のx座標
int nYDest,//コピー先長方形の左上隅のy座標
int nWidth,//コピー先長方形の幅
int nHeight,//コピー先長方形の高さ
HDC hdcSrc,//コピー元デバイスコンテキストのハンドル
int nXSrc,//コピー元長方形の左上隅のx座標
int nYSrc,//コピー元長方形の左上隅のy座標
DWORD dwRop//ラスタオペレーションコードSRCCOPY←そのままコピー
)")

●ScreenFlipEx({文字列=`$008800C6`}RASTERCODE)
	SYSTEM_ERROR=DCコピー((母艦の背景ハンドル),0,0,640,480,(BG_IMAGE_BASE→ハンドル),0,0,RASTERCODE)

●ClearAllScreen({=$FFFFFF}COLOR)
	BG_IMAGE_BASEを(COLOR)で画面クリア
	母艦を(COLOR)で画面クリア

	
Rcntとは整数 = 0
Slogとは文字列 = ""

●GUI作成()
	入力とは文字列
	返答とは文字列
	ログとは文字列
	
	GraphLib_Init(640,480)
	
	顔パネルをパネルとして作成
		顔パネル→親部品はBG_IMAGE_BASE
		顔パネル→背景色は青色
		顔パネル→H = 250
		顔パネル→W = 240
		顔パネル→レイアウトは"左"

	3回
		顔イメージ[回数]をイメージとして作成
			顔イメージ[回数]→親部品は顔パネル
			顔イメージ[回数]→透明化 = 1
			顔イメージ[回数]→可視 = 0
			顔イメージ[回数]→X = 50
			顔イメージ[回数]→Y = 50
			顔イメージ[回数]→H = 50
			顔イメージ[回数]→W = 50
			顔イメージ[回数]→最前面表示 = 1
	顔イメージ[1]→画像 = "image/機嫌いい.jpg"
	顔イメージ[2]→画像 = "image/普通.jpg"
	顔イメージ[2]→可視 = 1
	顔イメージ[3]→画像 = "image/機嫌悪い.jpg"

	会話パネルをパネルとして作成
		会話パネル→親部品はBG_IMAGE_BASE
		会話パネル→背景色は水色
		会話パネル→H = 250
		会話パネル→W = 400
		会話パネル→レイアウトは「右」
	
	2回
		返答パネル[回数]をパネルとして作成		
			返答パネル[回数]→親部品は会話パネル
			返答パネル[回数]→スタイル = "枠なし"
			返答パネル[回数]→X = 25
			返答パネル[回数]→Y = 20 -250
			返答パネル[回数]→H = 90
			返答パネル[回数]→W = 350
		返答イメージ[回数]をイメージとして作成		
			返答イメージ[回数]→親部品は返答パネル[回数]
			返答イメージ[回数]→画像 = "image/gurade_orange.png"
			返答イメージ[回数]→透明化 = 1
			返答イメージ[回数]→X = 0
			返答イメージ[回数]→Y = 0
			返答イメージ[回数]→H = 90
			返答イメージ[回数]→W = 350
		返答ラベル[回数]をラベルとして作成
			返答ラベル[回数]→親部品は返答パネル[回数]
			返答ラベル[回数]→文字サイズ = 10
			返答ラベル[回数]→X = 45
			返答ラベル[回数]→Y = 15
			返答ラベル[回数]→テキストは""

		発言パネル[回数]をパネルとして作成
			発言パネル[回数]→親部品は会話パネル
			発言パネル[回数]→スタイル = "枠なし"
			発言パネル[回数]→X = 25
			発言パネル[回数]→Y = 140 -250
			発言パネル[回数]→H = 90
			発言パネル[回数]→W = 350
		発言イメージ[回数]をイメージとして作成		
			発言イメージ[回数]→親部品は発言パネル[回数]
			発言イメージ[回数]→画像 = "image/gurade_blue.png"
			発言イメージ[回数]→透明化 = 1
			発言イメージ[回数]→X = 0
			発言イメージ[回数]→Y = 0
			発言イメージ[回数]→H = 90
			発言イメージ[回数]→W = 350
		発言ラベル[回数]をラベルとして作成
			発言ラベル[回数]→親部品は発言パネル[回数]
			発言ラベル[回数]→文字サイズ = 10
			発言ラベル[回数]→X = 15
			発言ラベル[回数]→Y = 15
			発言ラベル[回数]→テキストは""
	
	返答パネル[1]→Y = 20 
	発言パネル[1]→Y = 140
	
	Mflagとは整数
	
	入力エディタをエディタとして作成
		入力エディタ→親部品は会話パネル
		入力エディタ→背景色は白色
		入力エディタ→W = 400
		入力エディタ→IME = IMEオン
		入力エディタ→レイアウトは「下」
		入力エディタ→タグ = 2
		入力エディタ→キー押した時は〜
			もし、入力エディタ→押された仮想キー == 13ならば、
				もし、入力エディタ→テキスト != ""ならば、
					入力 = 入力エディタ→テキスト
					返答 = IA→応答メソッド(入力)
					もし、入力の文字数 > 20ならば、
						入力 = 入力の21に「{改行}」を文字挿入
					もし、返答の文字数 > 20ならば、
						返答 = 返答の21に「{改行}」を文字挿入
					SのCNTにAを文字挿入

					//20文字で改行
					ログ = Slog					
					Slog = IA→ログ取得(入力,返答)				
					IA→学習メソッド(入力)
					
					もし、入力エディタ→タグ == 1ならば、
						Mflag[0] = 2
						Mflag[1] = 1
						入力エディタ→タグ = 2
					違えば、もし、入力エディタ→タグ == 2ならば、
						Mflag[0] = 1
						Mflag[1] = 2	
						入力エディタ→タグ = 1
					
					Rcnt=Rcnt+1
					
					発言ラベル[Mflag[1]]→テキスト = 入力
					返答ラベル[Mflag[1]]→テキスト = 返答
					ログラベル[Rcnt]→テキスト = ログ
								
					入力エディタ→テキスト = ""
					入力 = ""
					返答 = ""
					ログ = ""
		
					25回
						発言パネル[Mflag[0]]→Y = 発言パネル[Mflag[0]]→Y + 10
						0.01秒待つ
					ここまで
					25回
						Rcnt回
							ログラベル[回数]→Y = ログラベル[回数]→Y+1.3
						返答パネル[Mflag[0]]→Y = 返答パネル[Mflag[0]]→Y + 10
						発言パネル[Mflag[1]]→Y = 発言パネル[Mflag[1]]→Y + 10
						0.01秒待つ
					ここまで
					発言パネル[Mflag[0]]→Y = 140 -250
					返答パネル[Mflag[0]]→Y = 20 -250
					
					25回
						返答パネル[Mflag[1]]→Y = 返答パネル[Mflag[1]]→Y + 10
						0.01秒待つ
					ここまで
					

	ログパネルをパネルとして作成
		ログパネル→親部品はBG_IMAGE_BASE
		ログパネル→H = 200
		ログパネル→レイアウトは「下」
	100回
		ログラベル[回数]をラベルとして作成
			ログラベル[回数]→親部品はログパネル
			ログラベル[回数]→背景色は赤色
			ログラベル[回数]→X = 5
			ログラベル[回数]→Y = -26
			ログラベル[回数]→H = 26
			ログラベル[回数]→テキストは""

	//ScreenFlipEx(SRCCOPY) ; //おもて画面に反映